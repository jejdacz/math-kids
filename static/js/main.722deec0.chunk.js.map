{"version":3,"sources":["components/Score/Score.component.jsx","components/Animate/Animate.component.jsx","components/App/AppStates/Game.appState.jsx","components/CustomButton/CustomButton.component.jsx","components/MenuButton/MenuButton.component.jsx","components/App/AppStates/Over.appState.jsx","components/App/AppStates/Intro.appSate.jsx","components/App/AppStates/Error.appSate.jsx","components/Problem/Problem.component.jsx","components/App/scenes.js","components/App/useScenes.js","components/App/createStore.js","components/App/createProblem.js","components/App/store.js","components/App/App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","theme.js","index.js"],"names":["Score","React","memo","score","className","style","classNames","toFixed","AnimateContext","createContext","Animate","children","context","useContext","Children","map","e","isValidElement","c","props","cloneElement","addClassToChildren","Game","scoreUnit","problem","displayName","StyledCustomButton","styled","button","theme","secondary","onSecondary","defaultProps","MenuButton","onClick","useRef","myTimeline","useMemo","TimelineLite","paused","useEffect","to","current","duration","ease","transform","kill","ref","eventCallback","restart","Over","restartGame","position","left","top","params","particlesConfig","Intro","startGame","Problem","checkAnswer","selectedButton","problemSpec","correctAnswer","answers","x","i","answer","correct","index","createButtons","scenes","init","next","introLoading","introGameStarting","roundLoading","roundSuccess","roundFail","roundCleanup","over","overGameRestarting","useScenes","scheme","useState","setCurrent","scene","includes","Error","cb","setTimeout","createStore","reducer","initState","initStateFunc","state","listeners","subscribe","listener","push","filter","l","dispatch","action","forEach","getState","operations","limit","num1","Math","floor","random","num2","addUnique","fn","arr","item","shuffle","a","b","createProblem","answersCount","operatorIndex","length","sort","appStates","Object","freeze","intro","error","roundInit","roundRunning","roundOver","initialGlobalState","appState","initScoreUnit","scoreUnitReducer","rounds","round","problemOptions","getInitialGlobalState","store","type","payload","startRound","timer","setInterval","clearInterval","reduceScoreUnit","finishRound","App","setState","setScene","playScene","setSelectedButton","unsubscribe","buttonsEnabled","handleStartGame","handleRestartGame","Provider","value","renderContent","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","primary","bacground","onPrimary","onBackground","gsap","registerPlugin","CSSPlugin","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.722deec0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport './Score.styles.scss';\n\nconst Score = React.memo(({ score, className, style }) => {\n  return (\n    <div style={style} className={classNames(className, 'score-container')}>\n      <h2 className='score'>{score.toFixed(1)}</h2>\n      <h2 className='score-title'>score</h2>\n    </div>\n  );\n});\n\nexport default Score;\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nexport const AnimateContext = React.createContext();\n\nconst addClassToChildren = (children, className) => {\n  const elements = React.Children.map(children, e => {\n    if (React.isValidElement(e)) {\n      const c = classNames(e.props.className, className);\n      return React.cloneElement(e, { className: c });\n    }\n    return e;\n  });\n\n  return elements;\n};\n\nconst addStyleToChildren = (children, style) => {\n  const elements = React.Children.map(children, e => {\n    if (React.isValidElement(e)) {\n      return React.cloneElement(e, { style: { ...e.props.style, ...style } });\n    }\n    return e;\n  });\n\n  return elements;\n};\n\nexport const Animate = ({ children }) => {\n  const context = useContext(AnimateContext);\n\n  //return addStyleToChildren(children, context[id]);\n\n  return addClassToChildren(children, classNames(context.className));\n};\n\n/*\n    alt1: add css class\n    alt2: add css style\n\n    alt3: div wrapper with css for all children elements\n    css:\n        btn1.wrapper > *\n            animation......\n\n*/\n\nexport default Animate;\n","import React from 'react';\nimport Score from '../../Score/Score.component';\nimport Animate from '../../Animate/Animate.component';\n\nconst Game = React.memo(({ score, scoreUnit, problem }) => {\n  return (\n    <div className='app game'>\n      {problem}\n      <Animate>\n        <h2 className='score-unit'>{scoreUnit.toFixed(2)}</h2>\n        <Score score={score} className='sc1' />\n      </Animate>\n    </div>\n  );\n});\n\nGame.displayName = 'Game';\n\nexport default Game;\n","import React from 'react';\nimport styled from 'styled-components';\n/*\nconst CustomButton = React.forwardRef((props, ref) => (\n  <button ref={ref} {...props}></button>\n));\n*/\n\n/* styled components\n\n  cons:\n    no ide hints\n    no scss functions (darken) ----> could be replace by JS function\n\n  pros:\n    one file\n    css unique class id\n\n  ********************\n\n  theming:\n    theme imported in index.js and provided by ThemeProvider from styled-components lib\n*/\n\nconst StyledCustomButton = styled.button`\n  font: inherit;\n  font-size: 1.7rem;\n  padding: 1.2rem 1.8rem;\n  border: 0;\n  background-color: ${props => props.theme.secondary};\n  color: ${props => props.theme.onSecondary};\n  outline: 0;\n  border-radius: 0.5rem;\n  text-align: center;\n  user-select: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nStyledCustomButton.defaultProps = {\n  theme: {\n    secondary: '#fff'\n  }\n};\n\nexport default StyledCustomButton;\n","import React, { useRef, useEffect, useMemo } from 'react';\nimport CustomButton from '../CustomButton/CustomButton.component';\nimport { TimelineLite } from 'gsap';\n\nconst MenuButton = ({ onClick, ...props }) => {\n  const button = useRef(null);\n  const myTimeline = useMemo(() => new TimelineLite({ paused: true }), []);\n\n  const handleClick = e => {\n    myTimeline.eventCallback('onComplete', () => onClick(e));\n    myTimeline.restart();\n  };\n\n  useEffect(() => {\n    myTimeline\n      .to(button.current, {\n        duration: 0.1,\n        ease: 'power3.out',\n        transform: 'scale(0.75)'\n      })\n      .to(button.current, {\n        duration: 0.2,\n        ease: 'back.out(3)',\n        transform: 'scale(1.0)'\n      })\n      .to(button.current, {\n        duration: 0.2,\n        transform: 'scale(1.0)'\n      });\n    return () => {\n      myTimeline.kill();\n    };\n  }, []);\n\n  return (\n    <CustomButton ref={button} onClick={handleClick} {...props}></CustomButton>\n  );\n};\n\nexport default MenuButton;\n","import React from 'react';\nimport MenuButton from '../../MenuButton/MenuButton.component';\nimport Score from '../../Score/Score.component';\nimport Particles from 'react-particles-js';\nimport particlesConfig from '../particlesjs-config.json';\nimport Animate from '../../Animate/Animate.component';\n\nconst Over = React.memo(({ score, restartGame }) => {\n  return (\n    <div className='app over'>\n      <Particles\n        style={{ position: 'absolute', left: '0', top: '0' }}\n        params={particlesConfig}\n        className='particles'\n      />\n      <Animate>\n        <Score className='large' score={score} />\n        <MenuButton onClick={restartGame} className='button-restart'>\n          RESTART\n        </MenuButton>\n      </Animate>\n    </div>\n  );\n});\n\nOver.displayName = 'Over';\n\nexport default Over;\n","import React from 'react';\nimport MenuButton from '../../MenuButton/MenuButton.component';\nimport Particles from 'react-particles-js';\nimport particlesConfig from '../particlesjs-config.json';\nimport Animate from '../../Animate/Animate.component';\n\nconst Intro = React.memo(({ startGame }) => {\n  return (\n    <div className='app intro'>\n      <Particles params={particlesConfig} />\n      <Animate>\n        <h1 className='main-title'>MATH KIDS</h1>\n        <MenuButton onClick={startGame} className='button-start'>\n          START\n        </MenuButton>\n      </Animate>\n    </div>\n  );\n});\n\nIntro.displayName = 'Intro';\n\nexport default Intro;\n","import React from 'react';\nimport CustomButton from '../../CustomButton/CustomButton.component';\n\nconst Intro = ({ startGame }) => {\n  return (\n    <div className='app error'>\n      <h1 className='main-title'>MATH KIDS</h1>\n      <p className='error'>Something bad happened!</p>\n      <CustomButton onClick={startGame} className='button-start'>\n        RESTART\n      </CustomButton>\n    </div>\n  );\n};\n\nexport default Intro;\n","import React, { Fragment } from 'react';\nimport CustomButton from '../CustomButton/CustomButton.component';\nimport Animate from '../Animate/Animate.component';\nimport classNames from 'classnames';\n\nimport './Problem.styles.scss';\n\nconst Problem = React.memo(\n  ({\n    checkAnswer,\n    selectedButton,\n    problemSpec: { problem, correctAnswer, answers }\n  }) => {\n    const createButtons = (correctAnswer, answers) => {\n      // create buttons\n      const buttons = answers.map((x, i) => (\n        <CustomButton\n          key={i}\n          onClick={checkAnswer(\n            x === correctAnswer\n              ? { answer: x, correct: true, index: i }\n              : { answer: x, correct: false, index: i }\n          )}\n          className={classNames(\n            'game-button',\n            x === correctAnswer ? 'success' : 'fail',\n            selectedButton === i && 'selected'\n          )}>\n          {x}\n        </CustomButton>\n      ));\n\n      return buttons;\n    };\n\n    return (\n      <Fragment>\n        <Animate>\n          <div className='problem'>{problem} = </div>\n        </Animate>\n        <div className='answer-container'>\n          <Animate>{createButtons(correctAnswer, answers)}</Animate>\n        </div>\n      </Fragment>\n    );\n  }\n);\n\nProblem.displayName = 'Problem';\n\nexport default Problem;\n","import './scenes.scss';\n\n// init property is mandatory\n\nconst scenes = {\n  init: {\n    index: 'init',\n    className: 'init',\n    next: ['introLoading'],\n    duration: 0\n  },\n  introLoading: {\n    index: 'introLoading',\n    className: 'intro-loading',\n    next: ['introGameStarting'],\n    duration: 500\n  },\n  introGameStarting: {\n    index: 'introGameStarting',\n    className: 'intro-game-starting',\n    next: ['roundLoading'],\n    duration: 500\n  },\n  roundLoading: {\n    index: 'roundLoading',\n    className: 'round-loading',\n    next: ['roundSuccess', 'roundFail'],\n    duration: 500\n  },\n  roundSuccess: {\n    index: 'roundSuccess',\n    className: 'round-success',\n    next: ['roundCleanup'],\n    duration: 500\n  },\n  roundFail: {\n    index: 'roundFail',\n    className: 'round-fail',\n    next: ['roundCleanup'],\n    duration: 500\n  },\n  roundCleanup: {\n    index: 'roundCleanup',\n    className: 'round-cleanup',\n    next: ['roundLoading', 'over'],\n    duration: 500\n  },\n  over: {\n    index: 'over',\n    className: 'over',\n    next: ['overGameRestarting'],\n    duration: 500\n  },\n  overGameRestarting: {\n    index: 'overGameRestarting',\n    className: 'over-game-restarting',\n    next: ['roundLoading'],\n    duration: 500\n  }\n};\n\nexport default scenes;\n","import { useState } from 'react';\n\n// scene is action (transition) between states\n// scheme is JS object\n\nconst useScenes = scheme => {\n  const [current, setCurrent] = useState(scheme.init);\n\n  const playScene = cb => setTimeout(cb, current.duration);\n\n  const setScene = scene => {\n    if (!current.next.includes(scene.index)) {\n      throw Error(`scene ${scene} isn't in current.next list`);\n    }\n\n    if (!scheme[scene.index] || scheme[scene.index] !== scene) {\n      throw Error(`scene ${scene} isn't in scheme`);\n    }\n\n    setCurrent(scheme[scene.index]);\n  };\n\n  return [current, setScene, playScene];\n};\n\nexport default useScenes;\n","const createStore = (reducer, initState, initStateFunc) => {\n  let state = initStateFunc ? initStateFunc(initState) : initState;\n  let listeners = [];\n\n  const getState = () => state;\n\n  const dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener());\n    return action;\n  };\n\n  const subscribe = listener => {\n    listeners.push(listener);\n    return () => listeners.filter(l => listener !== l);\n  };\n\n  return { subscribe, dispatch, getState };\n};\n\nexport default createStore;\n","const createSustraction = limit => {\n  const num1 = Math.floor(Math.random() * limit);\n  const num2 = Math.floor(Math.random() * limit);\n  const problem = `${num1} + ${num2}`;\n  const answer = num1 + num2;\n  return {\n    problem,\n    answer\n  };\n};\n\nconst createAddition = limit => {\n  const num1 = Math.floor(Math.random() * limit);\n  const num2 = Math.floor(Math.random() * limit);\n  const problem = `${num1 + num2} - ${num1}`;\n  const answer = num2;\n  return {\n    problem,\n    answer\n  };\n};\n\nconst operations = [createAddition, createSustraction];\n\nconst createBadAnswer = answer => {\n  const num = Math.floor(Math.random() * 10);\n  return num;\n};\n\nconst addUnique = (fn, arr) => {\n  const item = fn();\n  return arr.includes(item) ? addUnique(fn, arr) : [...arr, item];\n};\n\n// array sort function to shuffle values\nconst shuffle = (a, b) => 0.5 - Math.random();\n\nconst createProblem = ({ answersCount, limit }) => {\n  const operatorIndex = Math.floor(Math.random() * operations.length);\n\n  const { problem, answer: correctAnswer } = operations[operatorIndex](limit);\n\n  // create array of given length with random numbers\n  let answers = [correctAnswer];\n\n  while (answers.length < answersCount) {\n    answers = addUnique(() => createBadAnswer(correctAnswer), answers);\n  }\n\n  answers = answers.sort(shuffle);\n\n  return {\n    problem,\n    correctAnswer,\n    answers\n  };\n};\n\nexport default createProblem;\n","import createStore from './createStore';\nimport createProblem from './createProblem';\n\nexport const appStates = Object.freeze({\n  intro: 'intro',\n  over: 'over',\n  error: 'error',\n  roundInit: 'round-init', // components hidden\n  roundRunning: 'round-running', // timer started\n  roundSuccess: 'round-success', // animation of result\n  roundFail: 'round-fail', // animation of result\n  roundOver: 'round-over' // round is over\n});\n\nconst initialGlobalState = {\n  appState: appStates.intro,\n  initScoreUnit: 10,\n  scoreUnitReducer: 0.98,\n  rounds: 5,\n  score: 0,\n  scoreUnit: 10,\n  round: 1,\n  problemSpec: {},\n  problemOptions: { answersCount: 4, limit: 10 }\n};\n\nconst getInitialGlobalState = init => ({\n  ...init,\n  problemSpec: createProblem(init.problemOptions)\n});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'startGame':\n      return { ...state, appState: appStates.roundInit };\n    case 'restartGame':\n      return {\n        ...getInitialGlobalState(initialGlobalState),\n        appState: appStates.roundInit\n      };\n    case 'checkAnswer':\n      const { correct } = action.payload;\n      return {\n        ...state,\n        ...(correct && { score: state.score + state.scoreUnit }),\n        ...(correct\n          ? { appState: appStates.roundSuccess }\n          : { appState: appStates.roundFail })\n      };\n    case 'initRound':\n      return {\n        ...state,\n        round: state.round + 1,\n        appState: appStates.roundInit,\n        scoreUnit: state.initScoreUnit,\n        problemSpec: createProblem(state.problemOptions)\n      };\n\n    case 'startRound':\n      return { ...state, appState: appStates.roundRunning };\n    case 'finishRound':\n      return {\n        ...state,\n        appState: appStates.roundOver,\n        ...(state.round === state.rounds && {\n          appState: appStates.over\n        })\n      };\n    case 'reduceScoreUnit':\n      return { ...state, scoreUnit: state.scoreUnit * state.scoreUnitReducer };\n\n    default:\n      throw Error('action type not defined');\n  }\n};\n\n/*** store ***/\n\nexport const store = createStore(\n  reducer,\n  initialGlobalState,\n  getInitialGlobalState\n);\n\nconst { dispatch, getState } = store;\n\n/* actions */\n\nexport const startGame = () => dispatch({ type: 'startGame' });\nexport const restartGame = () => dispatch({ type: 'restartGame' });\nexport const checkAnswer = payload =>\n  dispatch({ type: 'checkAnswer', payload });\nexport const initRound = () => dispatch({ type: 'initRound' });\nexport const startRound = () => {\n  dispatch({ type: 'startRound' });\n  const timer = setInterval(() => {\n    getState().appState !== appStates.roundRunning\n      ? clearInterval(timer)\n      : reduceScoreUnit();\n  }, 100);\n};\nexport const finishRound = () => dispatch({ type: 'finishRound' });\nexport const reduceScoreUnit = () => {\n  dispatch({ type: 'reduceScoreUnit' });\n};\n","import React, { useState, useEffect } from 'react';\nimport Game from './AppStates/Game.appState';\nimport Over from './AppStates/Over.appState';\nimport Intro from './AppStates/Intro.appSate';\nimport Error from './AppStates/Error.appSate';\nimport Problem from '../Problem/Problem.component';\nimport scenes from './scenes';\nimport useScenes from './useScenes';\nimport { AnimateContext } from '../Animate/Animate.component';\nimport {\n  store,\n  appStates,\n  startGame,\n  restartGame,\n  startRound,\n  finishRound,\n  initRound,\n  checkAnswer\n} from './store';\n\nimport './App.scss';\n\n/*** App component ***/\n\nconst App = () => {\n  const [state, setState] = useState(store.getState());\n  const [scene, setScene, playScene] = useScenes(scenes);\n  const [selectedButton, setSelectedButton] = useState();\n\n  // subscribe to store\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => setState(store.getState()));\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const { score, scoreUnit, appState, problemSpec } = state;\n\n  useEffect(() => {\n    switch (scene) {\n      case scenes.introGameStarting:\n        playScene(startGame);\n        break;\n      case scenes.roundLoading:\n        playScene(startRound);\n        break;\n      case scenes.roundSuccess:\n        playScene(() => setScene(scenes.roundCleanup));\n        break;\n      case scenes.roundFail:\n        playScene(() => setScene(scenes.roundCleanup));\n        break;\n      case scenes.roundCleanup:\n        playScene(finishRound);\n        break;\n      case scenes.overGameRestarting:\n        playScene(restartGame);\n        break;\n      default:\n    }\n  }, [scene]);\n\n  useEffect(() => {\n    switch (appState) {\n      case appStates.intro:\n        setScene(scenes.introLoading);\n        break;\n      case appStates.roundInit:\n        setSelectedButton();\n        setScene(scenes.roundLoading);\n        break;\n      case appStates.roundSuccess:\n        setScene(scenes.roundSuccess);\n        break;\n      case appStates.roundFail:\n        setScene(scenes.roundFail);\n        break;\n      case appStates.roundOver:\n        initRound();\n        break;\n      case appStates.over:\n        setScene(scenes.over);\n        break;\n      default:\n    }\n  }, [appState]);\n\n  // buttons enabled only when game is running\n  const buttonsEnabled = appState === appStates.roundRunning;\n\n  const handleAnswer = answer => e => {\n    if (buttonsEnabled) {\n      setSelectedButton(answer.index);\n      checkAnswer(answer);\n    }\n  };\n\n  const handleStartGame = () => {\n    setScene(scenes.introGameStarting);\n  };\n\n  const handleRestartGame = () => {\n    setScene(scenes.overGameRestarting);\n  };\n\n  const problem = (\n    <Problem\n      {...{\n        problemSpec,\n        selectedButton\n      }}\n      checkAnswer={handleAnswer}\n    />\n  );\n\n  const renderContent = () => {\n    switch (appState) {\n      case appStates.intro:\n        return <Intro startGame={handleStartGame} />;\n      case appStates.roundInit:\n      case appStates.roundRunning:\n      case appStates.roundSuccess:\n      case appStates.roundFail:\n      case appStates.roundOver:\n        return <Game {...{ score, scoreUnit, problem }} />;\n      case appStates.over:\n        return <Over restartGame={handleRestartGame} {...{ score }} />;\n      default:\n        return <Error {...{ startGame }} />;\n    }\n  };\n\n  return (\n    <AnimateContext.Provider value={scene}>\n      {renderContent()}\n    </AnimateContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const theme = {\n  primary: '#3982c1', // blue\n  secondary: '#FF69B4', // hotpink\n  bacground: '#c4f2ff', // light blue\n  onPrimary: '#ffffff',\n  onSecondary: '#ffffff',\n  onBackground: '#000000'\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\nimport { gsap } from 'gsap';\nimport { CSSPlugin } from 'gsap/CSSPlugin';\n\ngsap.registerPlugin(CSSPlugin);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}